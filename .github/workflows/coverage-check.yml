name: MCP Server Coverage Check

on:
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install system dependencies
      run: sudo apt-get update && sudo apt-get install -y bc
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-test.txt
        pip install -e .
    
    - name: Run coverage analysis
      run: |
        coverage run --source=mcp_jira_server --omit="mcp_jira_server/test_*.py" -m unittest discover mcp_jira_server/ -v
        coverage xml
    
    - name: Check coverage threshold
      run: |
        COVERAGE=$(coverage report | tail -1 | awk '{print $4}' | sed 's/%//')
        echo "Current coverage: $COVERAGE%"
        echo "COVERAGE=$COVERAGE" >> $GITHUB_ENV
        
        # Check if coverage meets minimum threshold (90%)
        if (( $(echo "$COVERAGE < 90" | bc -l) )); then
          echo "❌ Coverage check failed: $COVERAGE% is below the required 90% threshold"
          echo "COVERAGE_STATUS=failed" >> $GITHUB_ENV
          exit 1
        else
          echo "✅ Coverage check passed: $COVERAGE% meets the required 90% threshold"
          echo "COVERAGE_STATUS=passed" >> $GITHUB_ENV
        fi
    
    - name: Comment PR with coverage results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const coverage = process.env.COVERAGE;
          const status = process.env.COVERAGE_STATUS;
          const threshold = 90;
          
          const statusIcon = status === 'passed' ? '✅' : '❌';
          const statusText = status === 'passed' ? 'PASSED' : 'FAILED';
          
          const comment = `## ${statusIcon} Code Coverage Check ${statusText}
          
          **Current Coverage:** ${coverage}%
          **Required Threshold:** ${threshold}%
          **Status:** ${status === 'passed' ? `Coverage meets the minimum requirement` : `Coverage is below the required threshold`}
          
          ${status === 'failed' ? '⚠️ **This PR cannot be merged until coverage reaches at least 90%**' : ''}
          
          ---
          *Coverage report generated by [coverage.py](https://coverage.readthedocs.io/)*`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          }); 