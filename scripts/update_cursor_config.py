#!/usr/bin/env python3
"""
Update Cursor MCP configuration for JIRA server integration.

This script updates the Cursor MCP configuration JSON file, creating it if necessary
and adding/updating the JIRA MCP server configuration.

Generated by: Cursor (Claude)
"""

import os
import json
import sys
from pathlib import Path


def find_cursor_config():
    """Find the Cursor MCP configuration file."""
    # Cursor MCP configuration file location
    return Path("~/.cursor/mcp.json").expanduser()


def update_cursor_config(python_path, config_path, cwd_path):
    """Update the Cursor MCP configuration."""
    config_file = find_cursor_config()
    
    # Ensure the directory exists
    config_file.parent.mkdir(parents=True, exist_ok=True)
    
    # JIRA MCP server configuration
    jira_config = {
        "command": python_path,
        "args": ["-m", "mcp_jira_server.server", "--config", config_path],
        "cwd": cwd_path,
        "env": {
            "PYTHONPATH": cwd_path
        }
    }
    
    # Load existing configuration or create new one
    try:
        if config_file.exists():
            with open(config_file, 'r') as f:
                data = json.load(f)
            print(f"✓ Found existing Cursor config: {config_file}")
        else:
            data = {}
            print(f"✓ Creating new Cursor config: {config_file}")
    except json.JSONDecodeError:
        print(f"⚠ Invalid JSON in {config_file}, recreating...")
        data = {}
    
    # Ensure mcpServers section exists
    if "mcpServers" not in data:
        data["mcpServers"] = {}
        print("✓ Created mcpServers section")
    
    # Check if jira server already exists
    if "jira" in data["mcpServers"]:
        print("✓ Updated existing 'jira' MCP server configuration")
    else:
        print("✓ Added new 'jira' MCP server configuration")
    
    # Add/update the JIRA server configuration
    data["mcpServers"]["jira"] = jira_config
    
    # Write the updated configuration
    with open(config_file, 'w') as f:
        json.dump(data, f, indent=2)
    
    print(f"✓ Saved configuration to: {config_file}")
    return config_file


def main():
    """Main function."""
    if len(sys.argv) != 4:
        print("Usage: update_cursor_config.py <python_path> <config_path> <cwd_path>", file=sys.stderr)
        sys.exit(1)
    
    python_path, config_path, cwd_path = sys.argv[1:4]
    
    try:
        config_file = update_cursor_config(python_path, config_path, cwd_path)
        
        # Show summary
        print("\nConfiguration Summary:")
        print(f"  • MCP config file: {config_file}")
        print(f"  • Python executable: {python_path}")
        print(f"  • JIRA config: {config_path}")
        print(f"  • Working directory: {cwd_path}")
        print(f"  • Server name: jira")
        
    except Exception as e:
        print(f"Error updating Cursor configuration: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == "__main__":
    main()