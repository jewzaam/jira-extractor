# Generated by: Cursor (Claude)
# Makefile for JIRA Extractor
# Copyright (C) 2025 Naveen Z. Malik

.PHONY: help setup clean clean-cache test-setup test-connection lint run-example status default install-requirements-test coverage coverage-unit coverage-html
.DEFAULT_GOAL := default

# Variables
VENV_DIR = venv
PYTHON = $(VENV_DIR)/bin/python
PIP = $(VENV_DIR)/bin/pip
REQUIREMENTS = requirements.txt
REQUIREMENTS_TEST = requirements-test.txt

# Colors for output
CYAN := \033[36m
GREEN := \033[32m
YELLOW := \033[33m
RED := \033[31m
BLUE := \033[34m
PURPLE := \033[35m
WHITE := \033[37m
RESET := \033[0m

default: test coverage ## Run all tests and generate coverage report
	@printf "$(GREEN)Default target completed: tests and coverage generated!$(RESET)\n"

install-requirements-test: setup ## Install test requirements including coverage
	@printf "$(BLUE)Installing test dependencies...$(RESET)\n"
	@$(PIP) install -r $(REQUIREMENTS_TEST)
	@printf "$(GREEN)Test dependencies installed successfully!$(RESET)\n"

help: ## Show this help message
	@printf "$(WHITE)JIRA Extractor - Available Commands$(RESET)\n"
	@printf "$(PURPLE)=======================================$(RESET)\n"
	@printf "\n"
	@awk 'BEGIN {FS = ":.*##"; printf "$(CYAN)Available Targets:$(RESET)\n"} \
		/^[a-zA-Z_][a-zA-Z0-9_-]*:.*##/ { \
			printf "  $(GREEN)%-15s$(RESET) %s\n", $$1, $$2 \
		}' $(MAKEFILE_LIST)
	@printf "\n"
	@printf "$(YELLOW)Examples:$(RESET)\n"
	@printf "  make default               # Run tests and coverage (default)\n"
	@printf "  make setup                 # Initial project setup\n"
	@printf "  make test                  # Run all tests with linting\n"
	@printf "  make coverage              # Run tests with coverage report\n"
	@printf "  make coverage-html         # Generate HTML coverage report\n"
	@printf "  make test-connection       # Test JIRA connectivity\n"
	@printf "  make run-example           # Run with example parameters\n"
	@printf "\n"

setup: ## Setup - Create virtual environment and install dependencies
	@printf "$(BLUE)Setting up JIRA Extractor...$(RESET)\n"
	@if [ ! -d "$(VENV_DIR)" ]; then \
		printf "$(YELLOW)Creating virtual environment...$(RESET)\n"; \
		python3 -m venv $(VENV_DIR); \
	else \
		printf "$(GREEN)Virtual environment already exists$(RESET)\n"; \
	fi
	@printf "$(YELLOW)Installing dependencies...$(RESET)\n"
	@$(PIP) install --upgrade pip
	@$(PIP) install -r $(REQUIREMENTS)
	@printf "$(GREEN)Setup completed successfully!$(RESET)\n"
	@printf "\n"
	@printf "$(CYAN)Next steps:$(RESET)\n"
	@printf "  1. Run 'make test-setup' to verify installation\n"
	@printf "  2. Run 'make test-connection' to test JIRA connectivity\n"
	@printf "  3. See 'make help' for more options\n"

test-setup: setup ## Test - Verify installation and show help
	@printf "$(BLUE)Testing JIRA Extractor setup...$(RESET)\n"
	@printf "$(YELLOW)Checking Python and dependencies...$(RESET)\n"
	@$(PYTHON) --version
	@$(PYTHON) -c "import requests, yaml; print('✓ Dependencies installed')"
	@printf "$(YELLOW)Testing CLI help...$(RESET)\n"
	@$(PYTHON) jira_extractor.py --help
	@printf "$(GREEN)Setup verification completed!$(RESET)\n"

test-connection: setup ## Test - Test JIRA connectivity (requires JIRA_URL, JIRA_USER, JIRA_TOKEN/JIRA_PASS)
	@printf "$(BLUE)Testing JIRA connectivity...$(RESET)\n"
	@if [ -z "$(JIRA_URL)" ]; then \
		printf "$(RED)Error: JIRA_URL environment variable not set$(RESET)\n"; \
		printf "$(YELLOW)Usage: JIRA_URL=https://jira.company.com JIRA_USER=myuser JIRA_TOKEN=mytoken make test-connection$(RESET)\n"; \
		exit 1; \
	fi
	@if [ -z "$(JIRA_USER)" ]; then \
		printf "$(RED)Error: JIRA_USER environment variable not set$(RESET)\n"; \
		exit 1; \
	fi
	@if [ -n "$(JIRA_TOKEN)" ]; then \
		printf "$(YELLOW)Testing connection with bearer token authentication...$(RESET)\n"; \
		$(PYTHON) jira_extractor.py -u "$(JIRA_URL)" -i "RFE-7877" --bearer-token "$(JIRA_TOKEN)" --debug; \
	elif [ -n "$(JIRA_PASS)" ]; then \
		printf "$(YELLOW)Testing connection with password authentication...$(RESET)\n"; \
		$(PYTHON) jira_extractor.py -u "$(JIRA_URL)" -i "RFE-7877" --username "$(JIRA_USER)" --password "$(JIRA_PASS)" --debug; \
	else \
		printf "$(RED)Error: Either JIRA_TOKEN or JIRA_PASS environment variable must be set$(RESET)\n"; \
		exit 1; \
	fi

run-example: setup ## Run - Execute with example parameters (set JIRA_URL, JIRA_USER, JIRA_ISSUE, JIRA_TOKEN)
	@printf "$(BLUE)Running JIRA Extractor example...$(RESET)\n"
	@if [ -z "$(JIRA_URL)" ] || [ -z "$(JIRA_USER)" ] || [ -z "$(JIRA_ISSUE)" ]; then \
		printf "$(YELLOW)Example usage:$(RESET)\n"; \
		printf "  JIRA_URL=https://issues.redhat.com JIRA_USER=\$$USER JIRA_ISSUE=RFE-7877 JIRA_TOKEN=mytoken make run-example\n"; \
		printf "\n"; \
		printf "$(CYAN)Required environment variables:$(RESET)\n"; \
		printf "  JIRA_URL    - JIRA instance URL\n"; \
		printf "  JIRA_USER   - JIRA username\n"; \
		printf "  JIRA_ISSUE  - Issue key to extract\n"; \
		printf "  JIRA_TOKEN  - API token (or JIRA_PASS for password)\n"; \
		exit 1; \
	fi
	@if [ -n "$(JIRA_TOKEN)" ]; then \
		$(PYTHON) jira_extractor.py -u "$(JIRA_URL)" -i "$(JIRA_ISSUE)" --username "$(JIRA_USER)" --token "$(JIRA_TOKEN)"; \
	elif [ -n "$(JIRA_PASS)" ]; then \
		$(PYTHON) jira_extractor.py -u "$(JIRA_URL)" -i "$(JIRA_ISSUE)" --username "$(JIRA_USER)" --password "$(JIRA_PASS)"; \
	else \
		printf "$(RED)Error: Either JIRA_TOKEN or JIRA_PASS must be set$(RESET)\n"; \
		exit 1; \
	fi

# Test targets
.PHONY: test test-client test-cli test-all test-verbose test-no-lint

test: test-setup lint test-all  ## Run all unit tests with linting
	@printf "$(GREEN)All tests and linting completed successfully!$(RESET)\n"

test-client: test-setup lint  ## Run client module tests with linting
	@printf "$(YELLOW)Running client tests...$(RESET)\n"
	$(PYTHON) -m unittest jira_extractor.test_client -v

test-cli: test-setup lint  ## Run CLI module tests with linting
	@printf "$(YELLOW)Running CLI tests...$(RESET)\n"
	$(PYTHON) -m unittest jira_extractor.test_cli -v

test-all: test-setup  ## Run all tests (internal target)
	@printf "$(YELLOW)Running all unit tests...$(RESET)\n"
	$(PYTHON) -m unittest jira_extractor.test_client jira_extractor.test_cli -v

test-verbose: test-setup lint  ## Run tests with maximum verbosity and linting
	@printf "$(YELLOW)Running all tests with detailed output...$(RESET)\n"
	$(PYTHON) -m unittest jira_extractor.test_client jira_extractor.test_cli -v 2>&1 | cat

test-no-lint: test-setup test-all  ## Run all unit tests without linting
	@printf "$(GREEN)All tests completed successfully (no linting)!$(RESET)\n"

# Coverage targets
.PHONY: coverage coverage-unit coverage-html

coverage: install-requirements-test ## Run tests with coverage and generate reports
	@printf "$(BLUE)Running tests with coverage...$(RESET)\n"
	@$(VENV_DIR)/bin/coverage run --source=jira_extractor --omit="jira_extractor/test_*.py" -m unittest jira_extractor.test_client jira_extractor.test_cli -v
	@printf "$(YELLOW)Generating coverage report...$(RESET)\n"
	@$(VENV_DIR)/bin/coverage report -m
	@$(VENV_DIR)/bin/coverage xml
	@printf "$(GREEN)Coverage analysis completed!$(RESET)\n"

coverage-unit: install-requirements-test ## Run coverage on unit tests only
	@printf "$(BLUE)Running unit tests with coverage...$(RESET)\n"
	@$(VENV_DIR)/bin/coverage run --source=jira_extractor --omit="jira_extractor/test_*.py" -m unittest jira_extractor.test_client jira_extractor.test_cli -v
	@printf "$(YELLOW)Generating coverage report...$(RESET)\n"
	@$(VENV_DIR)/bin/coverage report -m
	@$(VENV_DIR)/bin/coverage xml
	@printf "$(GREEN)Unit test coverage completed!$(RESET)\n"

coverage-html: install-requirements-test ## Generate HTML coverage report
	@printf "$(BLUE)Running tests with coverage and generating HTML report...$(RESET)\n"
	@$(VENV_DIR)/bin/coverage run --source=jira_extractor --omit="jira_extractor/test_*.py" -m unittest jira_extractor.test_client jira_extractor.test_cli -v
	@$(VENV_DIR)/bin/coverage html
	@printf "$(GREEN)HTML coverage report generated in htmlcov/ directory$(RESET)\n"
	@printf "$(CYAN)Open htmlcov/index.html in your browser to view the report$(RESET)\n"

lint: install-requirements-test ## Development - Run code linting
	@printf "$(BLUE)Running code linting...$(RESET)\n"
	@printf "$(CYAN)Linting Python files...$(RESET)\n"
	@$(VENV_DIR)/bin/flake8 jira_extractor.py jira_extractor/ --max-line-length=100 --ignore=E501,W503,W292 --exclude=jira_extractor/test_*.py
	@printf "$(CYAN)Linting test files...$(RESET)\n"
	@$(VENV_DIR)/bin/flake8 jira_extractor/test_*.py --max-line-length=120 --ignore=E501,W503,W291,W292,W293,E128

clean: clean-cache ## Maintenance - Remove virtual environment and cache files
	@printf "$(BLUE)Cleaning up JIRA Extractor...$(RESET)\n"
	@printf "$(YELLOW)Removing virtual environment...$(RESET)\n"
	@rm -rf $(VENV_DIR)
	@printf "$(GREEN)Full cleanup completed!$(RESET)\n"

clean-cache: ## Maintenance - Remove only cache files (keep venv)
	@printf "$(BLUE)Cleaning Python cache files...$(RESET)\n"
	@find . -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
	@find . -type f -name "*.pyc" -delete 2>/dev/null || true
	@find . -type f -name "*.pyo" -delete 2>/dev/null || true
	@printf "$(BLUE)Cleaning coverage files...$(RESET)\n"
	@rm -rf htmlcov/ 2>/dev/null || true
	@rm -f .coverage coverage.xml 2>/dev/null || true
	@printf "$(GREEN)Cache cleanup completed!$(RESET)\n"

status: ## Show - Display current project status
	@printf "$(WHITE)JIRA Extractor Project Status$(RESET)\n"
	@printf "$(PURPLE)=============================$(RESET)\n"
	@printf "\n"
	@printf "$(CYAN)Virtual Environment:$(RESET)\n"
	@if [ -d "$(VENV_DIR)" ]; then \
		printf "  $(GREEN)✓$(RESET) Virtual environment exists at $(VENV_DIR)\n"; \
		if [ -f "$(PYTHON)" ]; then \
			printf "  $(GREEN)✓$(RESET) Python executable found\n"; \
			$(PYTHON) --version | sed 's/^/  /'; \
		else \
			printf "  $(RED)✗$(RESET) Python executable not found\n"; \
		fi \
	else \
		printf "  $(RED)✗$(RESET) Virtual environment not found\n"; \
		printf "  $(YELLOW)→$(RESET) Run 'make setup' to create it\n"; \
	fi
	@printf "\n"
	@printf "$(CYAN)Dependencies:$(RESET)\n"
	@if [ -f "$(PYTHON)" ]; then \
		$(PYTHON) -c "import requests; print('  \\033[32m✓\\033[0m requests')" 2>/dev/null || printf "  $(RED)✗$(RESET) requests\n"; \
		$(PYTHON) -c "import yaml; print('  \\033[32m✓\\033[0m PyYAML')" 2>/dev/null || printf "  $(RED)✗$(RESET) PyYAML\n"; \
	else \
		printf "  $(YELLOW)?$(RESET) Cannot check (no Python environment)\n"; \
	fi
	@printf "\n"
	@printf "$(CYAN)Project Files:$(RESET)\n"
	@for file in jira_extractor.py requirements.txt README.md; do \
		if [ -f "$$file" ]; then \
			printf "  $(GREEN)✓$(RESET) $$file\n"; \
		else \
			printf "  $(RED)✗$(RESET) $$file\n"; \
		fi \
	done
	@printf "$(CYAN)Package Structure:$(RESET)\n"
	@for file in jira_extractor/__init__.py jira_extractor/client.py jira_extractor/cli.py; do \
		if [ -f "$$file" ]; then \
			printf "  $(GREEN)✓$(RESET) $$file\n"; \
		else \
			printf "  $(RED)✗$(RESET) $$file\n"; \
		fi \
	done
	@printf "$(CYAN)Test Files:$(RESET)\n"
	@for file in jira_extractor/test_client.py jira_extractor/test_cli.py; do \
		if [ -f "$$file" ]; then \
			printf "  $(GREEN)✓$(RESET) $$file\n"; \
		else \
			printf "  $(RED)✗$(RESET) $$file\n"; \
		fi \
	done
	@printf "$(CYAN)Coverage Files:$(RESET)\n"
	@if [ -f ".coverage" ]; then \
		printf "  $(GREEN)✓$(RESET) .coverage (coverage data)\n"; \
	else \
		printf "  $(YELLOW)-$(RESET) .coverage (run 'make coverage' to generate)\n"; \
	fi
	@if [ -f "coverage.xml" ]; then \
		printf "  $(GREEN)✓$(RESET) coverage.xml (XML report)\n"; \
	else \
		printf "  $(YELLOW)-$(RESET) coverage.xml (run 'make coverage' to generate)\n"; \
	fi
	@if [ -d "htmlcov" ]; then \
		printf "  $(GREEN)✓$(RESET) htmlcov/ (HTML report)\n"; \
	else \
		printf "  $(YELLOW)-$(RESET) htmlcov/ (run 'make coverage-html' to generate)\n"; \
	fi 