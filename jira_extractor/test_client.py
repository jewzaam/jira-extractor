#!/usr/bin/env python3
# Generated by: Cursor (Claude)
"""
Unit tests for JIRA Client

Copyright (C) 2025 Naveen Z. Malik
This program is licensed under GPL-3.0-or-later
"""

import unittest
from unittest.mock import Mock, patch
import requests
from requests.auth import HTTPBasicAuth

from .client import JiraClient


class TestJiraClient(unittest.TestCase):
    """Test cases for JiraClient class"""
    
    def setUp(self):
        """Set up test fixtures"""
        self.base_url = "https://test.jira.com"
        self.test_issue_key = "TEST-123"
        self.test_token = "test_token_123"
        self.test_username = "testuser"
        self.test_password = "testpass"
    
    def test_init_basic_auth(self):
        """Test JiraClient initialization with basic authentication"""
        client = JiraClient(
            self.base_url,
            auth_method="basic",
            username=self.test_username,
            password=self.test_password
        )
        
        self.assertEqual(client.base_url, self.base_url)
        self.assertEqual(client.api_base, f"{self.base_url}/rest/api/2/")
        self.assertIsInstance(client.session.auth, HTTPBasicAuth)
        self.assertEqual(client.session.auth.username, self.test_username)
        self.assertEqual(client.session.auth.password, self.test_password)
    
    def test_init_token_auth(self):
        """Test JiraClient initialization with API token authentication"""
        client = JiraClient(
            self.base_url,
            auth_method="token",
            username=self.test_username,
            token=self.test_token
        )
        
        self.assertIsInstance(client.session.auth, HTTPBasicAuth)
        self.assertEqual(client.session.auth.username, self.test_username)
        self.assertEqual(client.session.auth.password, self.test_token)
    
    def test_init_bearer_auth(self):
        """Test JiraClient initialization with Bearer token authentication"""
        client = JiraClient(
            self.base_url,
            auth_method="bearer",
            token=self.test_token
        )
        
        self.assertIsNone(client.session.auth)
        self.assertEqual(
            client.session.headers.get('Authorization'),
            f'Bearer {self.test_token}'
        )
    
    def test_init_no_auth(self):
        """Test JiraClient initialization without authentication"""
        client = JiraClient(self.base_url, auth_method=None)
        
        self.assertIsNone(client.session.auth)
        self.assertNotIn('Authorization', client.session.headers)
    
    def test_init_url_normalization(self):
        """Test URL normalization during initialization"""
        # Test with trailing slash
        client = JiraClient(f"{self.base_url}/", auth_method=None)
        self.assertEqual(client.base_url, self.base_url)
        
        # Test without scheme (should add https)
        client = JiraClient("test.jira.com", auth_method=None)
        self.assertEqual(client.base_url, "test.jira.com")
    
    def test_setup_auth_basic_missing_credentials(self):
        """Test basic auth setup with missing credentials"""
        with self.assertRaises(ValueError) as cm:
            JiraClient(self.base_url, auth_method="basic", username=self.test_username)
        self.assertIn("Basic auth requires username and password", str(cm.exception))
    
    def test_setup_auth_token_missing_credentials(self):
        """Test token auth setup with missing credentials"""
        with self.assertRaises(ValueError) as cm:
            JiraClient(self.base_url, auth_method="token", username=self.test_username)
        self.assertIn("Token auth requires username and token", str(cm.exception))
    
    def test_setup_auth_bearer_missing_token(self):
        """Test bearer auth setup with missing token"""
        with self.assertRaises(ValueError) as cm:
            JiraClient(self.base_url, auth_method="bearer")
        self.assertIn("Bearer auth requires token", str(cm.exception))
    
    def test_setup_auth_unsupported_method(self):
        """Test setup with unsupported authentication method"""
        with self.assertRaises(ValueError) as cm:
            JiraClient(self.base_url, auth_method="unsupported")
        self.assertIn("Unsupported auth method: unsupported", str(cm.exception))
    
    @patch('jira_extractor.client.requests.Session.get')
    def test_get_issue_success(self, mock_get):
        """Test successful issue retrieval"""
        # Setup mock response
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "key": self.test_issue_key,
            "fields": {"summary": "Test issue"}
        }
        mock_response.headers = {"Content-Type": "application/json"}
        mock_get.return_value = mock_response
        
        client = JiraClient(self.base_url, auth_method=None)
        result = client.get_issue(self.test_issue_key)
        
        # Verify API call
        expected_url = f"{self.base_url}/rest/api/2/issue/{self.test_issue_key}"
        mock_get.assert_called_once_with(expected_url, params={})
        
        # Verify result
        self.assertEqual(result["key"], self.test_issue_key)
        self.assertEqual(result["fields"]["summary"], "Test issue")
    
    @patch('jira_extractor.client.requests.Session.get')
    def test_get_issue_with_expand(self, mock_get):
        """Test issue retrieval with expand parameter"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"key": self.test_issue_key}
        mock_response.headers = {}
        mock_get.return_value = mock_response
        
        client = JiraClient(self.base_url, auth_method=None)
        client.get_issue(self.test_issue_key, expand="changelog,comments")
        
        expected_url = f"{self.base_url}/rest/api/2/issue/{self.test_issue_key}"
        mock_get.assert_called_once_with(expected_url, params={"expand": "changelog,comments"})
    
    @patch('jira_extractor.client.requests.Session.get')
    def test_get_issue_401_error(self, mock_get):
        """Test issue retrieval with 401 authentication error"""
        mock_response = Mock()
        mock_response.status_code = 401
        mock_response.headers = {}
        mock_get.return_value = mock_response
        
        client = JiraClient(self.base_url, auth_method=None)
        
        with self.assertRaises(Exception) as cm:
            client.get_issue(self.test_issue_key)
        self.assertIn("Authentication failed", str(cm.exception))
    
    @patch('jira_extractor.client.requests.Session.get')
    def test_get_issue_403_error(self, mock_get):
        """Test issue retrieval with 403 access denied error"""
        mock_response = Mock()
        mock_response.status_code = 403
        mock_response.headers = {}
        mock_get.return_value = mock_response
        
        client = JiraClient(self.base_url, auth_method=None)
        
        with self.assertRaises(Exception) as cm:
            client.get_issue(self.test_issue_key)

        self.assertIn(f"Access denied to Issue {self.test_issue_key}. Check permissions.", str(cm.exception))
    
    @patch('jira_extractor.client.requests.Session.get')
    def test_get_issue_404_error(self, mock_get):
        """Test issue retrieval with 404 not found error"""
        mock_response = Mock()
        mock_response.status_code = 404
        mock_response.headers = {}
        mock_get.return_value = mock_response
        
        client = JiraClient(self.base_url, auth_method=None)
        
        with self.assertRaises(Exception) as cm:
            client.get_issue(self.test_issue_key)
        self.assertIn(f"Issue {self.test_issue_key} not found", str(cm.exception))
    
    @patch('jira_extractor.client.requests.Session.get')
    def test_get_issue_http_error(self, mock_get):
        """Test issue retrieval with general HTTP error"""
        mock_response = Mock()
        mock_response.status_code = 500
        mock_response.headers = {}
        mock_response.raise_for_status.side_effect = requests.HTTPError("Server error")
        mock_get.return_value = mock_response
        
        client = JiraClient(self.base_url, auth_method=None)
        
        with self.assertRaises(requests.HTTPError):
            client.get_issue(self.test_issue_key)
    
    @patch('jira_extractor.client.requests.Session.get')
    def test_test_connection_success(self, mock_get):
        """Test successful connection test"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {
            "displayName": "Test User",
            "emailAddress": "test@example.com"
        }
        mock_get.return_value = mock_response
        
        client = JiraClient(self.base_url, auth_method="basic", 
                          username=self.test_username, password=self.test_password)
        result = client.test_connection()
        
        expected_url = f"{self.base_url}/rest/api/2/myself"
        mock_get.assert_called_once_with(expected_url, params={})
        self.assertEqual(result["displayName"], "Test User")
    
    @patch('jira_extractor.client.requests.Session.get')
    def test_test_connection_401_error(self, mock_get):
        """Test connection test with authentication failure"""
        mock_response = Mock()
        mock_response.status_code = 401
        mock_get.return_value = mock_response
        
        client = JiraClient(self.base_url, auth_method="basic",
                          username=self.test_username, password="wrong_password")
        
        with self.assertRaises(Exception) as cm:
            client.test_connection()

        self.assertIn("Authentication failed", str(cm.exception))
    
    @patch('jira_extractor.client.requests.Session.get')
    @patch('jira_extractor.client.logging')
    def test_debug_logging(self, mock_logging, mock_get):
        """Test that debug information is logged correctly"""
        mock_response = Mock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"key": self.test_issue_key}
        mock_response.headers = {"Content-Type": "application/json"}
        mock_get.return_value = mock_response
        
        client = JiraClient(self.base_url, auth_method=None)
        client.get_issue(self.test_issue_key, expand="comments")
        
        # Verify debug logging calls
        self.assertTrue(mock_logging.debug.called)
        debug_calls = [call[0][0] for call in mock_logging.debug.call_args_list]
        
        # Check that URL and parameters are logged
        self.assertTrue(any("Making API request to:" in call for call in debug_calls))
        self.assertTrue(any("Query parameters:" in call for call in debug_calls))
        self.assertTrue(any("Response status:" in call for call in debug_calls))
        self.assertTrue(any("Response headers:" in call for call in debug_calls))


if __name__ == '__main__':
    unittest.main() 
