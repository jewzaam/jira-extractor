#!/usr/bin/env python3
# Generated by: Cursor (Claude)
"""
JIRA Extractor - Command-line tool for extracting JIRA issues and related issues

Copyright (C) 2025 Naveen Z. Malik
This program is licensed under GPL-3.0-or-later
"""

import argparse
import json
import sys
import os
from urllib.parse import urlparse
from typing import Dict, Any
import logging
import getpass

import requests

from .client import JiraClient


def setup_logging(debug: bool = False):
    """Setup logging configuration"""
    level = logging.DEBUG if debug else logging.INFO
    format_str = '%(asctime)s - %(levelname)s: %(message)s' if debug else '%(levelname)s: %(message)s'
    
    logging.basicConfig(
        level=level,
        format=format_str,
        handlers=[logging.StreamHandler(sys.stderr)]
    )


def validate_url(url: str) -> str:
    """Validate and normalize JIRA URL"""
    parsed = urlparse(url)
    if not parsed.scheme:
        url = f"https://{url}"
        parsed = urlparse(url)
    
    if not parsed.netloc:
        raise ValueError(f"Invalid URL: {url}")
    
    return url


def write_output(data: Dict[str, Any], output_path: str, issue_key: str, overwrite: bool = False):
    """Write issue data to output destination"""
    json_str = json.dumps(data, indent=2, ensure_ascii=False)
    
    if output_path in ['-', 'stdout']:
        # Output to stdout
        print(json_str)
    else:
        # Output to file in directory
        os.makedirs(output_path, exist_ok=True)
        file_path = os.path.join(output_path, f"{issue_key}.json")
        
        # Check for existing file
        if os.path.exists(file_path) and not overwrite:
            raise Exception(f"File {file_path} already exists. Use --overwrite to replace it.")
        
        with open(file_path, 'w', encoding='utf-8') as f:
            f.write(json_str)
        
        print(f"Issue {issue_key} saved to {file_path}")


def create_parser():
    """Create and configure argument parser"""
    parser = argparse.ArgumentParser(
        description='JIRA Extractor - Extract JIRA issues and related issues',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s -u https://issues.redhat.com -i RFE-7877 --bearer-token abc123
  %(prog)s -u https://issues.redhat.com -i RFE-7877 --username $USER --token abc123
  %(prog)s -u https://issues.redhat.com -i RFE-7877 --username $USER --password
  %(prog)s -u https://issues.redhat.com -i RFE-7877 --username $USER -o ./output --bearer-token abc123
        """
    )
    
    # Required arguments
    parser.add_argument('-u', '--url', required=True, 
                       help='JIRA instance URL')
    parser.add_argument('-i', '--issue', required=True,
                       help='JIRA issue key (e.g., RFE-7877)')
    parser.add_argument('--username', 
                       help='JIRA username (required for --token and --password auth)')
    
    # Output options
    parser.add_argument('-o', '--output', default='-',
                       help='Output directory or "-" for stdout (default: stdout)')
    parser.add_argument('--overwrite', action='store_true',
                       help='Overwrite existing files')
    
    # Authentication options
    auth_group = parser.add_argument_group('Authentication')
    auth_group.add_argument('--password', help='JIRA password (will prompt if not provided)')
    auth_group.add_argument('--token', help='API token for Basic Auth (requires --username)')
    auth_group.add_argument('--bearer-token', help='Personal Access Token for Bearer Auth')
    
    # Field control options
    field_group = parser.add_argument_group('Field Control')
    field_group.add_argument('--expand', help='Comma-separated fields to expand (e.g., changelog,comments)')
    
    # Debug options
    parser.add_argument('--debug', action='store_true', help='Enable debug logging')
    
    return parser


def main():
    """Main entry point"""
    parser = create_parser()
    args = parser.parse_args()
    
    # Setup logging
    setup_logging(args.debug)
    
    # Validate inputs
    try:
        url = validate_url(args.url)
    except ValueError as e:
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)
    
    # Auto-detect authentication method and validate required arguments
    if args.bearer_token:
        # Bearer token authentication (Personal Access Token)
        auth_method = "bearer"
        auth_kwargs = {"token": args.bearer_token}
    elif args.token:
        # API token authentication (Basic Auth with username:token)
        if not args.username:
            print("Error: --username is required when using --token", file=sys.stderr)
            sys.exit(1)
        auth_method = "token"
        auth_kwargs = {"username": args.username, "token": args.token}
    elif args.username or args.password:
        # Basic authentication (username:password)
        if not args.username:
            print("Error: --username is required for password authentication", file=sys.stderr)
            sys.exit(1)
        auth_method = "basic"
        password = args.password
        if not password:
            password = getpass.getpass("Password: ")
        auth_kwargs = {"username": args.username, "password": password}
    else:
        # No authentication (for public issues)
        auth_method = None
        auth_kwargs = {}
    
    try:
        # Initialize JIRA client
        client = JiraClient(url, auth_method, **auth_kwargs)
        
        # Test connection (skip for unauthenticated access)
        if auth_method is not None:
            logging.info("Testing JIRA connection...")
            user_info = client.test_connection()
            logging.info(f"Connected as: {user_info.get('displayName', args.username)}")
        else:
            logging.info("Attempting unauthenticated access to public issue...")
        
        # Fetch issue
        logging.info(f"Fetching issue: {args.issue}")
        issue_data = client.get_issue(args.issue, expand=args.expand)
        
        # Write output
        write_output(issue_data, args.output, args.issue, args.overwrite)
        
        if args.output not in ['-', 'stdout']:
            logging.info("Extraction completed successfully")
    
    except requests.exceptions.ConnectionError:
        print(f"Error: Failed to connect to JIRA at {url}", file=sys.stderr)
        sys.exit(1)
    except requests.exceptions.Timeout:
        print("Error: Request timed out", file=sys.stderr)
        sys.exit(1)
    except requests.exceptions.HTTPError as e:
        print(f"Error: HTTP error: {e}", file=sys.stderr)
        sys.exit(1)
    except Exception as e:
        if args.debug:
            logging.exception("Unexpected error occurred")
        print(f"Error: {e}", file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    main() 